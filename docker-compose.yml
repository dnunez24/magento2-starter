version: '3'
services:
  lb:
    image: nginx:1.10-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/http-proxy.conf:/etc/nginx/conf.d/default.conf
      # Uncomment the following lines and SSL cert & key for HTTPS
      # - ./docker/conf/nginx/https-proxy.conf:/etc/nginx/conf.d/default.conf
      # - ./docker/conf/magento.crt:/etc/nginx/magento.crt
      # - ./docker/conf/magento.key:/etc/nginx/magento.key
    links:
      - fpc:fpc.magento.dev
    environment:
      - TZ
    networks:
      public:
      front:
  fpc:
    image: dnunez24/varnish
    volumes:
      - ./docker/conf/varnish.vcl:/etc/varnish/default.vcl
    links:
      - http:http.magento.dev
    environment:
      - TZ
      - VARNISH_STORAGE
    networks:
      front:
  http:
    image: nginx:1.10-alpine
    volumes:
      - ./docker/conf/nginx/fastcgi-proxy.conf:/etc/nginx/conf.d/default.conf
      - ./docker/conf/nginx/start.sh:/start.sh
    links:
      - app:app.magento.dev
    volumes_from:
      - app
    environment:
      - TZ
    networks:
      front:
    command: [/start.sh]
  app:
    image: local/magento2-dev
    build:
      context: ./docker/app
      dockerfile: Dockerfile
      args:
          COMPOSER_AUTH: $COMPOSER_AUTH
    volumes:
      - app:/var/www/html
      - ./magento:/var/www/html/magento
      - ./vendor:/var/www/html/vendor
      - ./docker/conf/php.ini:/usr/local/etc/php/conf.d/magento.ini
    links:
      - db:db.magento.dev
      - cache:cache.magento.dev
      - session:session.magento.dev
    user: www-data
    environment:
      - TZ
      - COMPOSER_AUTH
    networks:
      front:
      back:
  cron:
    image: dnunez24/magento2-ce
    volumes:
      - ./conf/crontab:/var/spool/cron/crontabs/root
    links:
      - db:db.magento.dev
      - cache:cache.magento.dev
      - session:session.magento.dev
    volumes_from:
      - app
    environment:
      - TZ
    command: [/usr/sbin/crond, -f, -L, /dev/stdout]
    networks:
      back:
  node:
    build:
      context: ./docker/node
    image: dnunez24/node:7-alpine
    volumes:
      - ./docker/node/package.json:/var/www/html/app/package.json
      - ./docker/node/Gruntfile.js:/var/www/html/app/Gruntfile.js
      - ./docker/node/grunt-config.json:/var/www/html/app/grunt-config.json
    volumes_from:
      - app
    command: [npm, install]
  cache:
    image: redis:3.2-alpine
    volumes:
      - cache:/data
      - ./docker/redis-cache.conf:/usr/local/etc/redis/redis.conf
    environment:
      - TZ
    networks:
      back:
    command: [redis-server, /usr/local/etc/redis/redis.conf]
  session:
    image: redis:3.2-alpine
    volumes:
      - session:/data
      - ./docker/redis-session.conf:/usr/local/etc/redis/redis.conf
    environment:
      - TZ
    networks:
      back:
    command: [redis-server, /usr/local/etc/redis/redis.conf]
  db:
    image: percona:5.6
    ports:
      - "3306:3306"
    volumes:
      - db:/var/lib/mysql
      # - ./magento.sql.gz:/docker-entrypoint-initdb.d/
    environment:
      - TZ
      - MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE
      - MYSQL_USER
      - MYSQL_PASSWORD
    networks:
      back:
volumes:
  app:
  db:
  cache:
  session:
networks:
  public:
  front:
  back:
