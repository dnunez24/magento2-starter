version: '2'
services:
  lb:
    image: haproxy:1-alpine
    ports:
      - "80:80"
      # - "443:443"
    links:
      - fpc:fpc.magento.dev
    volumes:
      - ./conf/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      # Uncomment this and provide an SSL certificate file for SSL support
      # - ./conf/magento.pem:/etc/haproxy/certs/magento.pem
    command: ["/usr/local/sbin/haproxy", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
    networks:
      public:
      front:
  fpc:
    image: dnunez24/varnish
    links:
      - http:http.magento.dev
    volumes:
      - ./conf/varnish.vcl:/etc/varnish/default.vcl
    environment:
      - VARNISH_STORAGE
    networks:
      front:
  http:
    image: nginx:1.10-alpine
    links:
      - app:app.magento.dev
    volumes_from:
      - app
    volumes:
      - ./conf/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./bin/nginx-start.sh:/start.sh
    networks:
      front:
    command: [/start.sh]
  app:
    image: dnunez24/magento2-ee
    links:
      - cache:cache.magento.dev
      - session:session.magento.dev
      - db:db.magento.dev
      - search:search.magento.dev
      - mq:mq.magento.dev
    volumes:
      - app:/var/www/html
      # - ./conf/env.php:/var/www/html/app/etc/env.php
      - ./conf/php.ini:/usr/local/etc/php/conf.d/magento.ini
    user: www-data
    networks:
      front:
      back:
  cron:
    image: dnunez24/magento2-ee
    links:
      - cache:cache.magento.dev
      - session:session.magento.dev
      - db:db.magento.dev
      - search:search.magento.dev
      - mq:mq.magento.dev
    volumes_from:
      - app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./conf/crontab:/var/spool/cron/crontabs/root
    command: [/usr/sbin/crond, -f, -L, /dev/stdout]
    networks:
      back:
  cache:
    image: redis:3.2-alpine
    volumes:
      - cache:/data
      - ./conf/redis-cache.conf:/usr/local/etc/redis/redis.conf
    networks:
      back:
    command: [redis-server, /usr/local/etc/redis/redis.conf]
    # echo never > /sys/kernel/mm/transparent_hugepage/enabled
    # vm.overcommit_memory = 1' to /etc/sysctl.conf
    # sysctl vm.overcommit_memory=1
    # TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128
  session:
    image: redis:3.2-alpine
    volumes:
      - session:/data
      - ./conf/redis-session.conf:/usr/local/etc/redis/redis.conf
    networks:
      back:
    command: [redis-server, /usr/local/etc/redis/redis.conf]
    # echo never > /sys/kernel/mm/transparent_hugepage/enabled
    # vm.overcommit_memory = 1' to /etc/sysctl.conf
    # sysctl vm.overcommit_memory=1
    # TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128
  search:
    image: elasticsearch:2
    ports:
      - "9200:9200"
    volumes:
      - ./conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - search:/usr/share/elasticsearch/data
    networks:
      back:
  mq:
    image: rabbitmq:3
    ports:
      - "5672:5672"
    volumes:
      - mq:/var/lib/rabbitmq
    environment:
      - RABBITMQ_ERLANG_COOKIE
      - RABBITMQ_DEFAULT_VHOST
      - RABBITMQ_DEFAULT_USER
      - RABBITMQ_DEFAULT_PASS
      # - RABBITMQ_HIPE_COMPILE
    networks:
      back:
  db:
    image: percona:5.6
    ports:
      - "3306:3306"
    volumes:
      - db:/var/lib/mysql
      # - ./conf/data.sql.gz:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE
      - MYSQL_USER
      - MYSQL_PASSWORD
    networks:
      back:
volumes:
  app:
  db:
  cache:
  session:
  search:
  mq:
networks:
  public:
  front:
  back:
